[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "type" : "Module",
    "desc" : "Hyper is a hyper shortcut modal.",
    "Constructor" : [

    ],
    "doc" : "Hyper is a hyper shortcut modal.\n\nFeel free to modify... I use karabiner-elements.app on my laptop and QMK on\nmy mech keyboards to bind a single key to `F19`, which fires all this\nHammerspoon-powered OSX automation.\n\nI chiefly use it to launch applications quickly from a single press,\nalthough I also use it to create \"universal\" local bindings inspired by\nShawn Blanc's OopsieThings.\nhttps:\/\/thesweetsetup.com\/oopsiethings-applescript-for-things-on-mac\/",
    "Method" : [
      {
        "doc" : "Sets the key for triggering the hyper modal. (e.g. F19)\n\nParameters:\n * key - A string containing a valid keycode of a keyboard key (as found in hs.keycodes.map)\n\nReturns:\n * self",
        "stripped_doc" : [
          "Sets the key for triggering the hyper modal. (e.g. F19)",
          ""
        ],
        "name" : "setHyperKey",
        "desc" : "Sets the key for triggering the hyper modal. (e.g. F19)",
        "notes" : [

        ],
        "signature" : "Hyper:setHyperKey(string) -> table",
        "type" : "Method",
        "returns" : [
          " * self"
        ],
        "def" : "Hyper:setHyperKey(string) -> table",
        "parameters" : [
          " * key - A string containing a valid keycode of a keyboard key (as found in hs.keycodes.map)",
          ""
        ]
      },
      {
        "doc" : "Expects a configuration table with an applications key that has the\nfollowing form:\nconfigTable.applications = {\n  ['com.culturedcode.ThingsMac'] = {\n    bundleID = 'com.culturedcode.ThingsMac',\n    hyperKey = 't',\n    localBindings = {',', '.'}\n  },\n}\n\nParameters:\n * configTable - A table containing applications.\n\nReturns:\n * self",
        "stripped_doc" : [
          "Expects a configuration table with an applications key that has the",
          "following form:",
          "configTable.applications = {",
          "  ['com.culturedcode.ThingsMac'] = {",
          "    bundleID = 'com.culturedcode.ThingsMac',",
          "    hyperKey = 't',",
          "    localBindings = {',', '.'}",
          "  },",
          "}",
          ""
        ],
        "name" : "start",
        "desc" : "Expects a configuration table with an applications key that has the",
        "notes" : [

        ],
        "signature" : "Hyper:start(configTable) -> table",
        "type" : "Method",
        "returns" : [
          " * self"
        ],
        "def" : "Hyper:start(configTable) -> table",
        "parameters" : [
          " * configTable - A table containing applications.",
          ""
        ]
      },
      {
        "doc" : "Passes on a binding to the Spoon's internal hs.hotkey.modal, same\narguments as `hs.hotkey.modal:bind()`\n\nParameters:\n * mods - A table or a string containing (as elements, or as substrings with any separator) the keyboard modifiers required,\n   which should be zero or more of the following:\n   * \"cmd\", \"command\" or \"⌘\"\n   * \"ctrl\", \"control\" or \"⌃\"\n   * \"alt\", \"option\" or \"⌥\"\n   * \"shift\" or \"⇧\"\n * key - A string containing the name of a keyboard key (as found in [hs.keycodes.map](hs.keycodes.html#map) ), or a raw keycode number\n * message - A string containing a message to be displayed via `hs.alert()` when the hotkey has been triggered, or nil for no alert\n * pressedfn - A function that will be called when the hotkey has been pressed, or nil\n * releasedfn - A function that will be called when the hotkey has been released, or nil\n * repeatfn - A function that will be called when a pressed hotkey is repeating, or nil\n\nReturns:\n * self",
        "stripped_doc" : [
          "Passes on a binding to the Spoon's internal hs.hotkey.modal, same",
          "arguments as `hs.hotkey.modal:bind()`",
          ""
        ],
        "name" : "bind",
        "desc" : "Passes on a binding to the Spoon's internal hs.hotkey.modal, same",
        "notes" : [

        ],
        "signature" : "Hyper:bind(args) -> table",
        "type" : "Method",
        "returns" : [
          " * self"
        ],
        "def" : "Hyper:bind(args) -> table",
        "parameters" : [
          " * mods - A table or a string containing (as elements, or as substrings with any separator) the keyboard modifiers required,",
          "   which should be zero or more of the following:",
          "   * \"cmd\", \"command\" or \"⌘\"",
          "   * \"ctrl\", \"control\" or \"⌃\"",
          "   * \"alt\", \"option\" or \"⌥\"",
          "   * \"shift\" or \"⇧\"",
          " * key - A string containing the name of a keyboard key (as found in [hs.keycodes.map](hs.keycodes.html#map) ), or a raw keycode number",
          " * message - A string containing a message to be displayed via `hs.alert()` when the hotkey has been triggered, or nil for no alert",
          " * pressedfn - A function that will be called when the hotkey has been pressed, or nil",
          " * releasedfn - A function that will be called when the hotkey has been released, or nil",
          " * repeatfn - A function that will be called when a pressed hotkey is repeating, or nil",
          ""
        ]
      }
    ],
    "Command" : [

    ],
    "items" : [
      {
        "doc" : "Passes on a binding to the Spoon's internal hs.hotkey.modal, same\narguments as `hs.hotkey.modal:bind()`\n\nParameters:\n * mods - A table or a string containing (as elements, or as substrings with any separator) the keyboard modifiers required,\n   which should be zero or more of the following:\n   * \"cmd\", \"command\" or \"⌘\"\n   * \"ctrl\", \"control\" or \"⌃\"\n   * \"alt\", \"option\" or \"⌥\"\n   * \"shift\" or \"⇧\"\n * key - A string containing the name of a keyboard key (as found in [hs.keycodes.map](hs.keycodes.html#map) ), or a raw keycode number\n * message - A string containing a message to be displayed via `hs.alert()` when the hotkey has been triggered, or nil for no alert\n * pressedfn - A function that will be called when the hotkey has been pressed, or nil\n * releasedfn - A function that will be called when the hotkey has been released, or nil\n * repeatfn - A function that will be called when a pressed hotkey is repeating, or nil\n\nReturns:\n * self",
        "stripped_doc" : [
          "Passes on a binding to the Spoon's internal hs.hotkey.modal, same",
          "arguments as `hs.hotkey.modal:bind()`",
          ""
        ],
        "name" : "bind",
        "desc" : "Passes on a binding to the Spoon's internal hs.hotkey.modal, same",
        "notes" : [

        ],
        "signature" : "Hyper:bind(args) -> table",
        "type" : "Method",
        "returns" : [
          " * self"
        ],
        "def" : "Hyper:bind(args) -> table",
        "parameters" : [
          " * mods - A table or a string containing (as elements, or as substrings with any separator) the keyboard modifiers required,",
          "   which should be zero or more of the following:",
          "   * \"cmd\", \"command\" or \"⌘\"",
          "   * \"ctrl\", \"control\" or \"⌃\"",
          "   * \"alt\", \"option\" or \"⌥\"",
          "   * \"shift\" or \"⇧\"",
          " * key - A string containing the name of a keyboard key (as found in [hs.keycodes.map](hs.keycodes.html#map) ), or a raw keycode number",
          " * message - A string containing a message to be displayed via `hs.alert()` when the hotkey has been triggered, or nil for no alert",
          " * pressedfn - A function that will be called when the hotkey has been pressed, or nil",
          " * releasedfn - A function that will be called when the hotkey has been released, or nil",
          " * repeatfn - A function that will be called when a pressed hotkey is repeating, or nil",
          ""
        ]
      },
      {
        "doc" : "Sets the key for triggering the hyper modal. (e.g. F19)\n\nParameters:\n * key - A string containing a valid keycode of a keyboard key (as found in hs.keycodes.map)\n\nReturns:\n * self",
        "stripped_doc" : [
          "Sets the key for triggering the hyper modal. (e.g. F19)",
          ""
        ],
        "name" : "setHyperKey",
        "desc" : "Sets the key for triggering the hyper modal. (e.g. F19)",
        "notes" : [

        ],
        "signature" : "Hyper:setHyperKey(string) -> table",
        "type" : "Method",
        "returns" : [
          " * self"
        ],
        "def" : "Hyper:setHyperKey(string) -> table",
        "parameters" : [
          " * key - A string containing a valid keycode of a keyboard key (as found in hs.keycodes.map)",
          ""
        ]
      },
      {
        "doc" : "Expects a configuration table with an applications key that has the\nfollowing form:\nconfigTable.applications = {\n  ['com.culturedcode.ThingsMac'] = {\n    bundleID = 'com.culturedcode.ThingsMac',\n    hyperKey = 't',\n    localBindings = {',', '.'}\n  },\n}\n\nParameters:\n * configTable - A table containing applications.\n\nReturns:\n * self",
        "stripped_doc" : [
          "Expects a configuration table with an applications key that has the",
          "following form:",
          "configTable.applications = {",
          "  ['com.culturedcode.ThingsMac'] = {",
          "    bundleID = 'com.culturedcode.ThingsMac',",
          "    hyperKey = 't',",
          "    localBindings = {',', '.'}",
          "  },",
          "}",
          ""
        ],
        "name" : "start",
        "desc" : "Expects a configuration table with an applications key that has the",
        "notes" : [

        ],
        "signature" : "Hyper:start(configTable) -> table",
        "type" : "Method",
        "returns" : [
          " * self"
        ],
        "def" : "Hyper:start(configTable) -> table",
        "parameters" : [
          " * configTable - A table containing applications.",
          ""
        ]
      }
    ],
    "Field" : [

    ],
    "name" : "Hyper"
  }
]
